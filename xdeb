#!/bin/sh

# Directories and filenames
XDEB_PKGROOT="$(realpath "${XDEB_PKGROOT-${PWD}}")"
XDEB_DESTDIR="${XDEB_PKGROOT}/destdir"
XDEB_DATADIR="${XDEB_PKGROOT}/data"
XDEB_BINPKGS="${XDEB_PKGROOT}/binpkgs"
XDEB_SHLIBS="${XDEB_PKGROOT}/shlibs"

# Options
XDEB_OPT_DEPS=false
XDEB_OPT_SYNC=false
XDEB_OPT_QUIT=false
XDEB_OPT_EXTRACT=true
XDEB_OPT_CLEAN_DIR=false
XDEB_OPT_WARN_CONFLICT=true
XDEB_SUFFIX=""

alias pkgrep="grep -Po -m1"

log_message () {
	echo "$(tput bold)[$(tput setaf 6)i$(tput sgr0)$(tput bold)]$(tput sgr0) ${*}"
}

log_success () {
	echo "$(tput bold)[$(tput setaf 2)+$(tput sgr0)$(tput bold)]$(tput sgr0) ${*}"
}

log_failure () {
	echo "$(tput bold)[$(tput setaf 3)-$(tput sgr0)$(tput bold)]$(tput sgr0) ${*}"
}

log_critical () {
	echo "$(tput bold)[$(tput setaf 1)!$(tput sgr0)$(tput bold)]$(tput sgr0) ${*}"
}

# clean : Removes old package data, without removing any binpkgs
clean () {
	rm -rf "${XDEB_PKGROOT}"/control.tar.?z
	rm -rf "${XDEB_PKGROOT}"/data.tar.?z
	rm -rf "${XDEB_PKGROOT}"/debian-binary

	rm -rf "${XDEB_BINPKGS}"/.xbps-pkg-*

	rm -rf "${XDEB_DATADIR}"
	rm -rf "${XDEB_DESTDIR}"
}

# clean_repodata : Removes the repodata file. Needed to rebuild a package with the same version
clean_repodata () {
	rm -rf "${XDEB_BINPKGS}"/*-repodata
}

# clean_all : Remove everything, this script created
clean_all () {
	clean
	clean_repodata
	rm -rf "${XDEB_BINPKGS}"
	rm -rf "${XDEB_SHLIBS}"
}

autodeps () {
	find "${XDEB_DESTDIR}" -type f | while read -r f; do
		[ "$(head -c 4 "${f}")" = "$(printf "\177ELF")" ] || continue
		objdump -p "${f}" | grep NEEDED | awk '{print $2}'

	done | sort -u | while read -r lib; do
		_lib=$(echo "${lib}" | sed -E 's|\+|\\+|g')
		rdep="$(grep -E "^${_lib}[[:blank:]]+.*$" ${XDEB_SHLIBS} | cut -d ' ' -f2)"

		[ -z "${rdep}" ] && {
			log_failure "Unable to find dependency for ${lib}" >&2
			continue
		}

		printf "%s " "${rdep}${XDEB_SUFFIX}>=0"
	done
}

check_command() {
	command -v "$1" > /dev/null 2>&1 && return 0

	log_critical "Dependency '${1}' not found"
	exit 1
}

help () {
	cat << EOF
usage: xdeb [-S] [-d] [-Sd] [--deps] ... FILE
  -d                       # Automatic dependencies
  -S                       # Sync runtime dependency file
  -c                       # Clean everything except shlibs and binpkgs
  -r                       # Clean repodata (Use when rebuilding a package)
  -q                       # Don't build the package at all
  -C                       # Clean all files
  -b                       # No extract, just build files in destdir
  -e                       # Remove empty directories
  -m                       # Add the -32bit suffix
  -i                       # Ignore file conflicts
  --deps                   # Add manual dependencies
  --arch                   # Add an arch for the package to run on
  --revision               # Set package revision. Alternative to -R, to not remove the repodata
  --help | -h              # Show this page

example:
  xdeb -Cq                 # Remove all files and quit
  xdeb -Sd FILE            # Sync depdendency list and create package
  xdeb --deps 'ar>0' FILE  # Add ar as a manual dependency and create package
EOF
}

check_command tar # tar
check_command curl # curl

check_command ar # binutils
check_command objdump # binutils

check_command xbps-rindex # xbps
check_command xbps-create # xbps

mkdir -p "${XDEB_PKGROOT}"

i=0
for arg in "${@}"; do
	i=$((i + 1))
	# Does the current argument start with a dash?
	rest="${arg#?}"
	first="${arg%"${rest}"}"
	tmp="${rest}"
	[ "${first}" != "-" ] && break
	
	case "${arg}" in
		--deps)
			XDEB_DEPENDENCIES="$(eval echo "\${$((i + 1))}")"
			continue;;
		--arch)
			archs="$(eval echo "\${$((i + 1))}")"
			continue;;
		--revision)
			revision="$(eval echo "\${$((i + 1))}")"
			continue;;
		--help)
			help
			exit 0;;
		*);;
	esac

	while [ -n "${tmp}" ]; do
		rest="${tmp#?}"
		first="${tmp%"${rest}"}"
		
		case "${first}" in
			S)
				XDEB_OPT_SYNC=true;;
			d)
				XDEB_OPT_DEPS=true;;
			h)
				help
				exit 0;;
			c)
				clean;;
			C)
				clean_all;;
			r)
				clean_repodata;;
			q)
				XDEB_OPT_QUIT=true;;
			b)
				XDEB_OPT_EXTRACT=false;;
			e)
				XDEB_OPT_CLEAN_DIR=true;;
			m)
				XDEB_SUFFIX="-32bit";;
			i)
				XDEB_OPT_WARN_CONFLICT=false;;
			*)
				log_failure "Unknown option ${arg}"
				help
				exit 1;;
		esac

		tmp="${rest}"
	done
done

[ "${XDEB_OPT_SYNC}" = true ] && {
	curl \
		-s "https://raw.githubusercontent.com/void-linux/void-packages/master/common/shlibs" \
		-o "${XDEB_SHLIBS}"
	log_success "Synced shlibs"
}

[ "${XDEB_OPT_DEPS}" = true ] && [ ! -r "${XDEB_SHLIBS}" ] && {
	log_failure "Sync atleast once, before using the depencency option"
	exit 1
}

# Quit after parsing every argument argument
[ "${XDEB_OPT_QUIT}" = true ] && {
	log_message "Quitting before building"
	exit 0;
}

# find last argument
for XDEB_BASEPKG in "$@"; do true; done

[ "${XDEB_OPT_EXTRACT}" = true ] && {
	# Does the filename end with .deb? Is the file readable?
	echo "${XDEB_BASEPKG}" | grep -q "\.deb$" || [ -r "${XDEB_BASEPKG}" ] || {
		log_failure "Last argument has to point to an existing deb package"
		exit 1
	}

	clean
	mkdir -p "${XDEB_BINPKGS}"
	mkdir -p "${XDEB_DATADIR}"
	mkdir -p "${XDEB_DESTDIR}"

	# Extract the packages, every operation has to succeed
	ar -xf "${XDEB_BASEPKG}" --output "${XDEB_PKGROOT}" &&
	tar -xf "${XDEB_PKGROOT}"/control.tar.?z -C "${XDEB_DATADIR}" &&
	tar -xf "${XDEB_PKGROOT}"/data.tar.?z -C "${XDEB_DESTDIR}" || {
		log_failure "Not a valid deb file"
		exit 1
	}

	log_success "Extracted files"
}

# The variable names are the same as in the regular xbps-src package build
pkgname=$(pkgrep "Package:[ \t]*\K.*" "${XDEB_DATADIR}/control")
version=$(pkgrep "Version:[ \t]*\K.*" "${XDEB_DATADIR}/control")
license=$(pkgrep "License:[ \t]*\K.*" "${XDEB_DATADIR}/control")
maintainer=$(pkgrep "Maintainer:[ \t]*\K.*" "${XDEB_DATADIR}/control")
short_desc=$(pkgrep "Description:[ \t]*\K.*" "${XDEB_DATADIR}/control")
long_desc=$(pkgrep -z "Description:[ \t\n]*\K.*" "${XDEB_DATADIR}/control" | tr '\0' '\n')
archs=${archs-$(pkgrep "Architecture:[ \t]*\K.*" "${XDEB_DATADIR}/control")}
revision="${revision-1}"

# It seems that debian packages don't have to provide a short_desc (XMind-ZEN didn't do it)
[ -z "${short_desc}" ] && short_desc="${long_desc}"

version=$(echo "${version}" | grep -Po "^(\d|\.)*")
case "${archs}" in
	amd64) archs="x86_64";;
	i386) archs="i686";;
	all) archs="noarch";;
	*);;
esac

[ "${XDEB_OPT_DEPS}" = true ] && {
	XDEB_DEPENDENCIES="${XDEB_DEPENDENCIES} $(autodeps)"
	log_success "Resolved dependencies (${XDEB_DEPENDENCIES})"
}

log_success "'Parsed' deb control file"

find "${XDEB_DESTDIR}" | {
	rc=0

	while read -r file; do
		# Remove empty directories
		[ "${XDEB_OPT_CLEAN_DIR}" = true ] && [ -z "$(ls -A "${file}")" ] && {
			rm -rf "${file}"
			log_success "Removed empty directory ${file}"
			continue
		}

		# Check for conflicts
		[ "${XDEB_OPT_WARN_CONFLICT}" != true ] && continue

		file_root="${file#${XDEB_DESTDIR}*}"
		[ ! -e "${file_root}" ] || { [ -d "${file_root}" ] && [ -d "${file}" ]; } && continue
		log_critical "Conflict: $(tput bold)${file}$(tput sgr0)"
		rc=1
	done

	return "${rc}"
} || log_failure "Unless updating, consider removing conflicting files and rebuild with \"-rb\""

# Simple way to shorten binpkgs
short_binpkgs=${XDEB_BINPKGS##${PWD}/}

cd "${XDEB_BINPKGS}" || exit

out=${pkgname}${XDEB_SUFFIX}-${version}_${revision}
xbps-create -q -A "${archs}" -n "${out}" -m "${maintainer}" -s "${short_desc}" -S "${long_desc}" -l "${license}" -D "${XDEB_DEPENDENCIES}" "${XDEB_DESTDIR}"
xbps-rindex -a ${out}.${archs}.xbps
log_success "Done. Install using \`xbps-install -R ${short_binpkgs} ${out}\`"
